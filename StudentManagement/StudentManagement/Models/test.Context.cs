//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SMSEntities : DbContext
    {
        public SMSEntities()
            : base("name=SMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BloodGroup> BloodGroups { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Faculty> Faculties { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<StudentDetail> StudentDetails { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Frontend_Image> Frontend_Image { get; set; }
        public virtual DbSet<Frontend_message> Frontend_message { get; set; }
        public virtual DbSet<Marksheet> Marksheets { get; set; }
        public virtual DbSet<Notice> Notices { get; set; }
    
        public virtual ObjectResult<Marksheet> inputmarks(Nullable<int> studentId, Nullable<int> facultyId, string first_name, string middle_name, string last_name)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("facultyId", facultyId) :
                new ObjectParameter("facultyId", typeof(int));
    
            var first_nameParameter = first_name != null ?
                new ObjectParameter("first_name", first_name) :
                new ObjectParameter("first_name", typeof(string));
    
            var middle_nameParameter = middle_name != null ?
                new ObjectParameter("middle_name", middle_name) :
                new ObjectParameter("middle_name", typeof(string));
    
            var last_nameParameter = last_name != null ?
                new ObjectParameter("last_name", last_name) :
                new ObjectParameter("last_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Marksheet>("inputmarks", studentIdParameter, facultyIdParameter, first_nameParameter, middle_nameParameter, last_nameParameter);
        }
    
        public virtual ObjectResult<Marksheet> inputmarks(Nullable<int> studentId, Nullable<int> facultyId, string first_name, string middle_name, string last_name, MergeOption mergeOption)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("facultyId", facultyId) :
                new ObjectParameter("facultyId", typeof(int));
    
            var first_nameParameter = first_name != null ?
                new ObjectParameter("first_name", first_name) :
                new ObjectParameter("first_name", typeof(string));
    
            var middle_nameParameter = middle_name != null ?
                new ObjectParameter("middle_name", middle_name) :
                new ObjectParameter("middle_name", typeof(string));
    
            var last_nameParameter = last_name != null ?
                new ObjectParameter("last_name", last_name) :
                new ObjectParameter("last_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Marksheet>("inputmarks", mergeOption, studentIdParameter, facultyIdParameter, first_nameParameter, middle_nameParameter, last_nameParameter);
        }
    }
}
